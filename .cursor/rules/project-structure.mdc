---
alwaysApply: true
description: 프로젝트 구조와 개발 워크플로우 가이드
---

# 프로젝트 구조 가이드

## 폴더 구조
```
fullkeem_portfolio/
├── app/                 # Next.js App Router
│   ├── (routes)/       # 라우트 그룹
│   └── api/            # API 엔드포인트
├── components/         # 재사용 컴포넌트
│   ├── common/        # 공통 컴포넌트
│   ├── ui/            # 기본 UI 컴포넌트
│   └── [feature]/     # 기능별 컴포넌트
├── lib/               # 유틸리티 함수
├── store/             # 상태 관리
├── types/             # TypeScript 타입
└── hooks/             # 커스텀 훅
```

## 핵심 파일들
- [app/layout.tsx](mdc:app/layout.tsx) - 루트 레이아웃
- [components/common/Header.tsx](mdc:components/common/Header.tsx) - 네비게이션
- [lib/notion/client.ts](mdc:lib/notion/client.ts) - Notion API
- [store/filterStore.ts](mdc:store/filterStore.ts) - 필터링 상태
- [next.config.ts](mdc:next.config.ts) - Next.js 설정

## 개발 워크플로우
1. **컴포넌트 개발**: UI 컴포넌트부터 구현
2. **API 연동**: Notion API 클라이언트 활용
3. **상태 관리**: Zustand로 전역 상태 관리
4. **스타일링**: Tailwind CSS + CSS Variables
5. **최적화**: 성능 최적화 적용

## 명명 규칙
- **컴포넌트**: PascalCase (예: `BlogCard.tsx`)
- **파일**: kebab-case (예: `blog-card.tsx`)
- **폴더**: lowercase (예: `components/blog/`)
- **API**: RESTful 네이밍 (예: `/api/blog/[slug]`)

## 환경 설정
- **개발 환경**: Next.js 15.1.x + TypeScript
- **패키지 매니저**: pnpm
- **린팅**: ESLint + Prettier
- **타입 체크**: TypeScript strict mode

## 데이터 흐름
- **Notion API** → **Server Components** → **Client Components**
- **User Input** → **Zustand Store** → **UI Update**
- **Form Submit** → **API Route** → **External Service**

## 배포 고려사항
- **환경 변수**: [.env.example](mdc:.env.example) 참조
- **빌드 최적화**: 정적 생성 + ISR 활용
- **성능 모니터링**: Lighthouse CI 통합
